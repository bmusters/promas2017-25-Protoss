use ProtossGateway as knowledge.
use ProtossGateway as actionspec.
	

module ProtossGateway {
	% If we want a Zealot we train one.
	% We need to have a goal of amountOf('Unit Type', amount) and we need to have enough minerals to train a Zealot unit. The amount must be greater than the amount we have in our belief.
	% Since the queueSize percept can be a bit slower in the game, we have to update it manually so we know for sure that the queueSize works.  
	if goal(amountOf('Protoss Zealot', X)), bel(resources(Minerals, Gas, Cs, Ts), Minerals >= 100, amountOf('Protoss Zealot', Y), X>Y, queueSize(Size),M is Size + 1, Z is Size + Y, Z < X, Size < 2)
		then train('Protoss Zealot') + delete(queueSize(Size)) + insert(queueSize(M)).
		
	% If we want a Dragoon we train one.
	% We need to have a goal of amountOf('Unit Type', amount) and we need to have enough minerals and gas to train a Dragoon unit. The amount must be greater than the amount we have in our belief.
	% Since the queueSize percept can be a bit slower in the game, we have to update it manually so we know for sure that the queueSize works
	if goal(amountOf('Protoss Dragoon', X)), bel(resources(Minerals, Gas, Cs, Ts), Minerals >= 125, Gas >= 50, amountOf('Protoss Dragoon', Y), X>Y, queueSize(Size),M is Size + 1, Z is Size + Y, Z < X, Size < 1)
		then train('Protoss Dragoon') + delete(queueSize(Size)) + insert(queueSize(M)).

    % If we want a Dark Templar we train one.
	% We need to have a goal of amountOf('Unit Type', amount) and we need to have enough minerals and gas to train a Dark Templar unit. The amount must be greater than the amount we have in our belief.
	% Since the queueSize percept can be a bit slower in the game, we have to update it manually so we know for sure that the queueSize works
    if goal(amountOf('Protoss Dark Templar', X)), bel(resources(Minerals, Gas, Cs, Ts), Minerals >= 125, Gas >= 100, amountOf('Protoss Dark Templar', Y), X>Y, queueSize(Size),M is Size + 1, Z is Size + Y, Z < X, Size < 1)
        then train('Protoss Dark Templar') + delete(queueSize(Size)) + insert(queueSize(M)).

}